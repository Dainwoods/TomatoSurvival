<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm1 = true;
number = 4;
drawNumbers = false;
alarm2_1 = true;
alarm2_2 = true;
alarm2_3 = true;
str = "Hi Alec";
width = 2;
alarm[1] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles the timer for "The floor is gone"
number--;
if(number == 3 &amp;&amp; alarm2_1) {
    alarm2_1 = false;
    drawNumbers = true;
    alarm[2] = room_speed;
}
else if(number == 2 &amp;&amp; alarm2_2) {
    alarm2_2 = false;
    alarm[2] = room_speed;
}
else if(number == 1 &amp;&amp; alarm2_3) {
    alarm2_3 = false;
    alarm[2] = room_speed;
}
else if(number == 0) {
    drawNumbers = false;
    if(instance_exists(obj_wall)) {
        with(obj_wall) {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chooses the event
alarm1 = true;
eventTriggered = false;

odds = irandom_range(9, TOTAL_EVENTS + 1);//The plus 1 is for the extra odds of a mystery box
while(!eventTriggered) {
    //Spawns rain
    if(odds == 1) {
        eventTriggered = true;
    }
    //Spawns 3x3 or 5x5 bombs
    else if(odds == 2) {
        eventTriggered = true;
    } 
    //Spawns directional bombs
    else if(odds == 3) {
        eventTriggered = true;
    }
    //Spawns earthquake
    else if(odds == 4) {
        eventTriggered = true;
    }
    //Lava
    else if(odds == 5) {
        if(!global.floorGone) {
            eventTriggered = true;
        }
    }
    //Time bomb
    else if(odds == 6) {
        eventTriggered = true;
    }
    //Mystery Box
    else if((odds == 7 || odds == 8)) {
        if(!instance_exists(obj_chest)) {
            eventTriggered = true;
            odds = 7;
        }
    }
    else if(odds == 9) {
        eventTriggered = true;
    }
    else if(odds == 10) {
        eventTriggered = true;
    }
    if(!eventTriggered) {
        odds = irandom_range(1, TOTAL_EVENTS + 1);
    }
}
global.forecastNumber = odds;
alarm[0] = 15 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(odds == 1) {
    rain();
    global.drawEventText1 = true;
}
else if(odds == 2) {
    bomb();
    global.drawEventText2 = true;
}
else if(odds == 3) {
    directionBomb();
    global.drawEventText3 = true;
}
else if(odds == 4) {
    instance_create(0, 0, obj_earthquake);
    global.drawEventText4 = true;
}
else if(odds == 5) {
    with(obj_wall) {
        alarm[1] = 1;
    }
    global.drawEventText5 = true;
}
else if(odds == 6) {   
    timeBomb();
    global.drawEventText6 = true;
}
else if(odds == 7 || odds == 8) {
    mysteryBox();
    global.drawEventText7 = true;
}
else if(odds == 9) {
    thunder();
    global.drawEventText8 = true;
}
else if(odds == 10) {
    instance_create(0, 0, obj_ghost);
    global.drawEventText9 = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn pointBlocks
if(!instance_exists(obj_pointBlock)) {
    tempXCoord = random_range(0, 1024);
    tempYCoord = random_range(45, 736); //Can't spawn on top layer and is less likely to spawn on second layer.
    xCoord = tempXCoord - (tempXCoord mod(32)) + 16;
    yCoord = tempYCoord - (tempYCoord mod(32)) + 16;
    if(!position_meeting(xCoord, yCoord, obj_wall) &amp;&amp; yCoord &gt; 64) {
        instance_create(xCoord, yCoord, obj_pointBlock);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///After 15 seconds, will trigger some kind of event every 30 seconds.
if(alarm1) {
    alarm1 = false;
    alarm[1] = 15 * room_speed;
}

if(global.paused) {
    if(alarm[0] &gt; 0) {
        alarm[0]++;
    }
    if(alarm[1] &gt; 0) {
        alarm[1]++;
    }
    if(alarm[2] &gt; 0) {
        alarm[2]++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawNumbers) {
    draw_set_color(c_white);
    draw_set_alpha(1);
    str = string(number);
    width = string_width(str) / 2;
    draw_text_transformed((room_width / 2) - width, (room_height / 2) - 64, str, 2, 2, 0);
    draw_set_alpha(1);
    draw_set_color(c_black);
}
else {
    draw_set_alpha(0);
    draw_text_transformed((room_width / 2) - width, room_height, str, 3, 3, 0);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
