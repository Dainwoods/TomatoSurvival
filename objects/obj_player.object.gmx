<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_notPlaceable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates player variables
int = 160 / 70 - ((160 / 70)mod(1));
randomize();
grav = .6 / 2;
hsp = 0;
vsp = 0;
jumpSpeed = 5; //30 fps = 7
moveSpeed = 4 / 2;
maxHeight = 999999;
firstJump = true;
secondJump = false;
noFirstSecond= true;

audioEm = audio_emitter_create();
image_speed = 0;

tookDamage = false;
//Is true if damage from rain was taken in the last second(timing unsure)
tookRainDamage = false;
//Took damage from a bomb that deals one heart of damage
tookBombDamage1 = false; 
//Took damage from a bomb that deals two heart of damage
tookBombDamage2 = false;

if(!global.retro) {
    nextIndex = irandom_range(1, 3);
}
else {
    nextIndex = 0;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates global variables
global.hasKey = false;
global.timeLimit = false;
global.indestructible = false; //blocks indestructible
global.doubleEffect = false;
global.oneDamage = false;
global.damageBlocks = false;
global.fallDamage = true;
global.floorGone = false;
global.doubleJump = false;
global.forecast = false;
global.forecastNumber = 0;
global.isEarthquake = false;
global.canPlace = true;
global.invincible = false; //player invincible
global.raincoat = false;
global.visibleBlocks = true;

global.paused = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.visibleBlocks = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.canPlace = true;
global.drawChestText14 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.invincible = false;
global.drawChestText13 = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tookBombDamage1 = false;
tookBombDamage2 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles damage from 2 heart damage bombs
if(!tookBombDamage2) {
    tookBombDamage1 = true;
    tookBombDamage2 = true;
    if(global.oneDamage) {
        health--;
    }
    else {
        health -= 4;
    }
    audio_play_sound(snd_fallDamage, 11, false);
    instance_create(0, 0, eff_shakeSoft);
    alarm[5] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles damage from 1 heart health damage bombs
if(!tookBombDamage1) {
    tookBombDamage1 = true;
    tookBombDamage2 = true;
    if(global.oneDamage) {
        health--;
    }
    else {
        health -= 2;
    }
    instance_create(0, 0, eff_shakeSoft);
    audio_play_sound(snd_fallDamage, 11, false);
    alarm[5] = room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FLips rain damage boolean variable
//tookRainDamage = false;
tookDamage = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handles rain damage
if(!tookRainDamage) {
    health--;
    instance_create(0, 0, eff_shakeSoft);
    alarm[2] = room_speed;
    tookRainDamage = true;
    audio_play_sound(snd_fallDamage, 11, false);
    instance_create(0, 0, eff_shakeSoft);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>while(place_meeting(x, y, par_walkable)) {
    var walk = instance_place(x, y, par_walkable);
    if(walk.y &gt; y) {
        y--;
    }
    else {
        y++;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Player Movement
//Get the player's movement input
if(!global.paused) {

key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));

isJumping = false;

//If the current height is greater than the maxHeight, this is the top
if(obj_player.y &lt; maxHeight &amp;&amp; global.fallDamage) {
    maxHeight = obj_player.y;
}
else if(vsp == 0 &amp;&amp; global.fallDamage &amp;&amp; (place_meeting(x, y + 1, par_walkable) || place_meeting(x, y + 1, obj_timeBomb))) {
    distance = obj_player.y - maxHeight;
    maxHeight = 999999;
    //32 is size of one block
    //Under 5 blocks deals no damage, 5-10 deals 1, 10-15 deals 2, 15-20 deals 3, 20+ deals 4
    if(distance &gt;= 640) { //32 * 20
        takeDamage(4);
        /*if(global.oneDamage) {
            health--;
        }
        else {
            health -= 4;
        }
        instance_create(0, 0, eff_shakeSoft);
        audio_play_sound(snd_fallDamage, 11, false);*/
    }
    else if(distance &gt;= 480) { //32 * 15
        takeDamage(3)
        /*if(global.oneDamage) {
            health--;
        }
        else {
            health -= 3;
        }
        instance_create(0, 0, eff_shakeSoft);
        audio_play_sound(snd_fallDamage, 11, false);*/
    }
        else if(distance &gt;= 320) { //32 * 10
            takeDamage(2);
            /*if(global.oneDamage) {
                health--;
            }
            else {
                health -= 2;
            }
            instance_create(0, 0, eff_shakeSoft);
            audio_play_sound(snd_fallDamage, 11, false);*/
    }
    else if(distance &gt;= 160) { //32 * 5
        takeDamage(1);
        /*health--;
        instance_create(0, 0, eff_shakeSoft);
        audio_play_sound(snd_fallDamage, 11, false);*/
    }
}

//React to inputs
move = key_left + key_right;
hsp = move * moveSpeed;
if(vsp &lt; 10) {
    vsp += grav;
}



key_jump = keyboard_check(vk_space);
if(!firstJump &amp;&amp; !secondJump) {
    if(keyboard_check_released(vk_space) == 1) {
        secondJump = true;
    }
}
if(secondJump) {
    key_jump = keyboard_check_pressed(vk_space);

}

//Player can only jump while on a walkable object
if((place_meeting(x, y + 1, par_walkable) || place_meeting(x, y + 1, obj_timeBomb))) {
    firstJump = true;//was true;
    secondJump = false;
    noFirstSecond = true;
    vsp = key_jump * -jumpSpeed;
    if(key_jump == 1) {
        isJumping = true;
        firstJump = false;
    }
}
if(firstJump &amp;&amp; noFirstSecond) {
    secondJump = true;
    noFirstSecond = false;
}
if((secondJump &amp;&amp; global.doubleJump &amp;&amp; key_jump == 1)) {
    secondJump = false;
    firstJump = true;
    vsp = key_jump * -jumpSpeed;
}

//If there is a wall/block to the right/left and player is moving in that direction,
//move as far in the direction of the wall/block as possible.
if(place_meeting(x + hsp, y, par_walkable)|| place_meeting(x + hsp, y, obj_timeBomb)) {
    while(!place_meeting(x + sign(hsp), y, par_walkable) &amp;&amp; !place_meeting(x + sign(hsp), y, obj_timeBomb)) {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//if there is a wall beneath/above player and player is moving in that direction,
//move as far in the direction of the wall as possible.
if(place_meeting(x, y + vsp, par_walkable)|| place_meeting(x, y + vsp, obj_timeBomb) ) {
    while(!place_meeting(x, y + sign(vsp), par_walkable) &amp;&amp; !place_meeting(x, y + sign(vsp), obj_timeBomb)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

//Player can wrap horizontally on screen but not vertically
move_wrap(true, false, 10);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates buildingBlocks
//checks if right button is pressed
if(!global.paused) {

if(global.canPlace &amp;&amp; mouse_check_button(mb_right) &amp;&amp; mouse_y &gt; 64 &amp;&amp; !global.isEarthquake &amp;&amp; mouse_x &gt; 0 &amp;&amp; mouse_x &lt; room_width) {
    //checks if mouse is hovering over a buildingBlock, player, or wall
    if(!position_meeting(mouse_x, mouse_y, par_notPlaceable)) {
        //centers buildingBlock at the center of the block mouse is in.
        tempXBlock = mouse_x;
        tempYBlock = mouse_y;
        newXBlock = tempXBlock - (tempXBlock mod(32)) + 16;
        newYBlock = tempYBlock - (tempYBlock mod(32)) + 16;
        
        //creates an x and y variable for the top right corner of the player 
        //object that is located at the center of the block the top left corner 
        //is located in.
        tempXPlayerTR = obj_player.x + ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerTR = obj_player.y - ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerTR = tempXPlayerTR - (tempXPlayerTR mod(32)) + 16;
        newYPlayerTR = tempYPlayerTR - (tempYPlayerTR mod(32)) + 16;
        
        //top left corner of the player object
        tempXPlayerTL = obj_player.x - ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerTL = obj_player.y - ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerTL = tempXPlayerTL - (tempXPlayerTL mod(32)) + 16;
        newYPlayerTL = tempYPlayerTL - (tempYPlayerTL mod(32)) + 16;
        
        //bottom right corner of the player object
        tempXPlayerBR = obj_player.x + ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerBR = obj_player.y + ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerBR = tempXPlayerBR - (tempXPlayerBR mod(32)) + 16;
        newYPlayerBR = tempYPlayerBR - (tempYPlayerBR mod(32)) + 16;
        
        //bottom left corner of the player object
        tempXPlayerBL = obj_player.x - ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerBL = obj_player.y + ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerBL = tempXPlayerBL - (tempXPlayerBL mod(32)) + 16;
        newYPlayerBL = tempYPlayerBL - (tempYPlayerBL mod(32)) + 16;
        
        //checks that the newly created x and y values of the block are not equal to 
        //both the newly created x and y values of any of the player corners.
        if(newXBlock != newXPlayerTR || newYBlock != newYPlayerTR) {
            if(newXBlock != newXPlayerTL || newYBlock != newYPlayerTL) {
                if(newXBlock != newXPlayerBR || newYBlock != newYPlayerBR) {
                    if(newXBlock != newXPlayerBL || newYBlock != newYPlayerBL) {
                        //Checks if there is a point block
                        if(!position_meeting(newXBlock, newYBlock, obj_pointBlock) &amp;&amp; !position_meeting(newXBlock, newYBlock, par_bomb) &amp;&amp; !position_meeting(newXBlock, newYBlock, obj_key) &amp;&amp; !position_meeting(newXBlock, newYBlock, obj_chest)) {
                            //checks that player is within 100 units of the new block
                            if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 100) {
                                var block = instance_create(newXBlock, newYBlock, obj_buildingBlock);
                                if(!global.retro) {
                                    block.index = nextIndex;
                                    nextIndex = irandom_range(1, 3);
                                }
                                audio_emitter_pitch(audioEm, random_range(1.4, 1.8));
                                audio_play_sound_on(audioEm, snd_buildBlock, false, 12);
                                audio_sound_gain(snd_buildBlock, global.sfxVolume, 0);
                            
                            }
                        }
                    }
                }
            }
        }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates preBuildings
//checks that no mouse buttons are being pressed and there are no other preBuilding objects
if(!global.paused) {

if(global.canPlace &amp;&amp; !mouse_check_button_pressed(mb_any) &amp;&amp; instance_number(obj_preBuilding) == 0 &amp;&amp; mouse_y &gt; 64){
    //checks if mouse is hovering over a buildingBlock, player, wall, or preBuilding
    if(!position_meeting(mouse_x, mouse_y, par_notPlaceable)) {
        //centers preBuilding at the center of the block mouse is in.
        tempXBlock = mouse_x;
        tempYBlock = mouse_y;
        newXBlock = tempXBlock - (tempXBlock mod(32)) + 16;
        newYBlock = tempYBlock - (tempYBlock mod(32)) + 16;
        
        //creates an x and y variable for the top right corner of the player 
        //object that is located at the center of the block the top left corner 
        //is located in.
        tempXPlayerTR = obj_player.x + ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerTR = obj_player.y - ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerTR = tempXPlayerTR - (tempXPlayerTR mod(32)) + 16;
        newYPlayerTR = tempYPlayerTR - (tempYPlayerTR mod(32)) + 16;
        
        //top left corner of the player object
        tempXPlayerTL = obj_player.x - ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerTL = obj_player.y - ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerTL = tempXPlayerTL - (tempXPlayerTL mod(32)) + 16;
        newYPlayerTL = tempYPlayerTL - (tempYPlayerTL mod(32)) + 16;
        
        //bottom right corner of the player object
        tempXPlayerBR = obj_player.x + ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerBR = obj_player.y + ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerBR = tempXPlayerBR - (tempXPlayerBR mod(32)) + 16;
        newYPlayerBR = tempYPlayerBR - (tempYPlayerBR mod(32)) + 16;
        
        //bottom left corner of the player object
        tempXPlayerBL = obj_player.x - ((bbox_right + 1 - bbox_left) / 2);
        tempYPlayerBL = obj_player.y + ((bbox_bottom + 1 - bbox_top) / 2);
        newXPlayerBL = tempXPlayerBL - (tempXPlayerBL mod(32)) + 16;
        newYPlayerBL = tempYPlayerBL - (tempYPlayerBL mod(32)) + 16;
        
        //checks that the newly created x and y values of the block are not equal to 
        //both the newly created x and y values of any of the corners.
        if(newXBlock != newXPlayerTR || newYBlock != newYPlayerTR) {
            if(newXBlock != newXPlayerTL || newYBlock != newYPlayerTL) {
                if(newXBlock != newXPlayerBR || newYBlock != newYPlayerBR) {
                    if(newXBlock != newXPlayerBL || newYBlock != newYPlayerBL) {
                        if(!position_meeting(newXBlock, newYBlock, obj_pointBlock)) { 
                            //checks if distance from player to center of block is less than 100
                            if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 100 &amp;&amp; !global.isEarthquake) {
                                var pre = instance_create(newXBlock, newYBlock, obj_preBuilding);
                                pre.index = nextIndex;
                            }
                            else{
                                var place = instance_create(newXBlock, newYBlock, obj_placeHolder);
                                place.index = nextIndex;
                            }
                        }
                    }
                }
            }
        }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates preDestroys
if(!global.paused) {

if(!mouse_check_button_pressed(mb_any) &amp;&amp; instance_number(obj_preDestroy) = 0 &amp;&amp; !global.indestructible){
    //checks if mouse is hovering over a buildingBlock, player, wall, or preBuilding
    if(position_meeting(mouse_x, mouse_y, obj_buildingBlock)) {
        //centers preBuilding at the center of the block mouse is in.
        tempXBlock = mouse_x;
        tempYBlock = mouse_y;
        newXBlock = tempXBlock - (tempXBlock mod(32)) + 16;
        newYBlock = tempYBlock - (tempYBlock mod(32)) + 16;
        //checks if distance from player to center of block is less than 100.
        var block = instance_position(mouse_x, mouse_y, obj_buildingBlock);
        if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 140) {
            var pre = instance_create(newXBlock, newYBlock, obj_preDestroy);
            pre.index = block.index;
            obj_preDestroy.depth = -10;
        }
        else {
            var place = instance_create(newXBlock, newYBlock, obj_placeHolder);
            place.index = block.index;
            obj_placeHolder.depth = -10;
        }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player sprite controller
if(!global.paused) {


//Standing still
if(move == 0 &amp;&amp; vsp == 0) {
    audio_stop_sound(snd_walkGrass);
    audio_stop_sound(snd_walkBlock);
    if(global.retro) {
        sprite_index = spr_playerIdle;
        image_speed = .2 / 2;
    }
    else {
        sprite_index = spr_updatedPlayerIdle;
        image_speed = .3 / 2;
    }
    /*if(image_index &lt; 16 || image_index &gt;= 20) {
        image_index = 16;
    }
    image_speed= .2 / 2;*/
}
//Moving right
else if(move &gt; 0 &amp;&amp; vsp == 0) {
    if(place_meeting(x, y + 1, obj_wall) &amp;&amp; !audio_is_playing(snd_walkGrass)) {
        audio_play_sound(snd_walkGrass, 20, true);
        audio_sound_gain(snd_walkGrass, global.sfxVolume, 0);
    }
    else if(!audio_is_playing(snd_walkBlock)){
        audio_play_sound(snd_walkBlock, 20, true);
        audio_sound_gain(snd_walkBlock, global.sfxVolume, 0);
    }
    image_xscale = 1;
    if(global.retro) {
        sprite_index = spr_playerRun;
        image_speed = .2 / 2;
    }
    else {
        sprite_index = spr_updatedPlayerRun;
        image_speed = .3 / 2;
    }
    /*if(image_index &lt; 8 || image_index &gt;= 15) {
        image_index = 8;
    }
    image_speed = .2 / 2;*/
}
//Moving left
else if(move &lt; 0 &amp;&amp; vsp == 0) {
    if(place_meeting(x, y + 1, obj_wall) &amp;&amp; !audio_is_playing(snd_walkGrass)) {
        audio_play_sound(snd_walkGrass, 20, true);
        audio_sound_gain(snd_walkGrass, global.sfxVolume, 0);
    }
    else if(!audio_is_playing(snd_walkBlock)) {
        audio_play_sound(snd_walkBlock, 20, true);
        audio_sound_gain(snd_walkBlock, global.sfxVolume, 0);
    }
    image_xscale = -1;
    if(global.retro) {
        sprite_index = spr_playerRun;
        image_speed = .2 / 2;
    }
    else {
        sprite_index = spr_updatedPlayerRun;
        image_speed = .3 / 2;
    }
    /*if(image_index &gt;= 7 || image_index &gt; 15) {
        image_index = 0;
    }
    image_speed = .2 / 2;*/
}
//Falling
else if(vsp != 0) {
    audio_stop_sound(snd_walkGrass);
    audio_stop_sound(snd_walkBlock);
    if(global.retro) {
        sprite_index = spr_playerJump;
        image_speed = .2 / 2;
    }
    else {
        sprite_index = spr_updatedPlayerJump;
        image_speed = .2 / 2;
    }
    //image_index = 26;
}

}

else {
    //Standing still
    image_speed = 0;
    audio_stop_sound(snd_walkGrass);
    audio_stop_sound(snd_walkBlock);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(y &gt; room_height) {
    health = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroys BuildingBlocks
if(!global.paused) {

if(mouse_check_button(mb_left) &amp;&amp; !global.indestructible &amp;&amp; !mouse_check_button(mb_right)) {
    if(position_meeting(mouse_x, mouse_y, obj_preDestroy)) {
        with(instance_position(mouse_x, mouse_y, obj_buildingBlock)) {
            instance_destroy();
        }
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pointBlock">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_pointBlock</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increases score and plays sound
global.scr++;
audio_play_sound(snd_coin, 10, false);
audio_sound_gain(snd_coin, global.sfxVolume, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart code
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.paused = !global.paused;
if(global.paused) {
    instance_create(room_width / 2, room_height / 2, obj_pauseFade);
    instance_create(room_width / 2, room_height / 2, obj_pauseMenu);
}
else {
    with(obj_pauseFade) {
        instance_destroy();
    }
    with(obj_pauseMenu) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
